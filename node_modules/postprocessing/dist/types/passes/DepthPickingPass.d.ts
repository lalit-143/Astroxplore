import { Vector2, Vector3 } from "three";
import { DepthCopyMode } from "../enums/DepthCopyMode.js";
import { DepthCopyPass } from "./DepthCopyPass.js";
/**
 * A depth picking pass.
 *
 * @group Passes
 */
export declare class DepthPickingPass extends DepthCopyPass {
    /**
     * A callback that handles picking results.
     */
    private callback;
    /**
     * Constructs a new depth picking pass.
     *
     * @param mode - The depth copy mode.
     */
    constructor(mode?: DepthCopyMode);
    /**
     * Reads depth at a specific texture position.
     *
     * @param x - The X-coordinate.
     * @param x - The Y-coordinate.
     * @return The depth value.
     */
    private readDepthAt;
    /**
     * Reads depth at a specific screen position.
     *
     * If the mode is set to {@link DepthCopyMode.SINGLE}, only one depth value can be picked per frame. Calling this
     * method multiple times per frame will then overwrite the picking coordinates. Unresolved promises will be abandoned.
     *
     * @param ndc - Normalized device coordinates. Only X and Y are relevant.
     * @return A promise that returns the depth.
     * @example
     * const ndc = new Vector3();
     * const clientRect = myViewport.getBoundingClientRect();
     * const clientX = pointerEvent.clientX - clientRect.left;
     * const clientY = pointerEvent.clientY - clientRect.top;
     * ndc.x = (clientX / myViewport.clientWidth) * 2.0 - 1.0;
     * ndc.y = -(clientY / myViewport.clientHeight) * 2.0 + 1.0;
     * const depth = await depthPickingPass.readDepth(ndc);
     * ndc.z = depth * 2.0 - 1.0;
     * const worldPosition = ndc.unproject(camera);
     */
    readDepth(ndc: Vector2 | Vector3): Promise<number>;
    render(): void;
}
