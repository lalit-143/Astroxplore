import { OrthographicCamera, PerspectiveCamera, Scene, TextureDataType, WebGLMultipleRenderTargets, WebGLRenderer } from "three";
import { Pass } from "../core/Pass.js";
import { Selective } from "../core/Selective.js";
import { Selection } from "../utils/Selection.js";
import { GBuffer } from "../enums/GBuffer.js";
/**
 * Supported MSAA sample counts.
 *
 * @group Passes
 */
export declare type MSAASamples = 0 | 2 | 4 | 8;
/**
 * GeometryPass constructor options.
 *
 * @group Passes
 */
export interface GeometryPassOptions {
    /**
     * Determines whether a stencil buffer should be created. Default is `false`.
     */
    stencilBuffer?: boolean;
    /**
     * Determines whether a depth buffer should be created. Default is `true`.
     */
    depthBuffer?: boolean;
    /**
     * The type of the color buffer. Default is `UnsignedByteType`.
     */
    frameBufferType?: TextureDataType;
    /**
     * The amount of samples used for MSAA. Default is `0`.
     *
     * Will be limited to the maximum value supported by the device.
     */
    samples?: MSAASamples;
}
/**
 * A geometry pass.
 *
 * @group Passes
 */
export declare class GeometryPass extends Pass implements Selective {
    readonly selection: Selection;
    /**
     * A collection of materials that have been modified with `onBeforeCompile`.
     */
    private readonly registeredMaterials;
    /**
     * A copy pass that is used to blit the default input buffer to the output color buffer.
     */
    private readonly copyPass;
    /**
     * Controls which gBuffer components should be rendered by this pass.
     *
     * This will be automatically configured based on the requirements of other passes in the same pipeline.
     */
    readonly gBufferComponents: Set<GBuffer>;
    /**
     * Indicates whether the scene background should be ignored.
     */
    ignoreBackground: boolean;
    /**
     * Indicates whether the shadow map auto update should be skipped.
     */
    skipShadowMapUpdate: boolean;
    /**
     * Indicates whether a stencil buffer should be created.
     */
    private readonly stencilBuffer;
    /**
     * Indicates whether a depth buffer should be created.
     */
    private readonly depthBuffer;
    /**
     * The texture data type of the primary color buffer.
     */
    private readonly frameBufferType;
    /**
     * @see {@link samples}
     */
    private _samples;
    /**
     * Constructs a new geometry pass.
     *
     * @param scene - A scene.
     * @param camera - A camera.
     * @param options - Additional options.
     */
    constructor(scene: Scene, camera: OrthographicCamera | PerspectiveCamera, { stencilBuffer, depthBuffer, frameBufferType, samples }?: GeometryPassOptions);
    get renderer(): WebGLRenderer | null;
    set renderer(value: WebGLRenderer | null);
    protected onInputChange(): void;
    /**
     * Sets the amount of MSAA samples.
     */
    get samples(): MSAASamples;
    set samples(value: MSAASamples);
    /**
     * Alias for `output.defaultBuffer`.
     */
    get gBuffer(): WebGLMultipleRenderTargets | null;
    /**
     * The GBuffer component indices.
     */
    get gBufferIndices(): Map<GBuffer, number>;
    /**
     * Enables rendering to GBuffer components for a given material.
     *
     * @param material - The material.
     */
    private updateMaterial;
    /**
     * Enables rendering to GBuffer components for all materials in a given scene.
     *
     * Should be called when a mesh or material is added, removed or replaced at runtime.
     *
     * @param scene - The scene, or a subset of a scene.
     */
    updateMaterials(scene?: Scene | null): void;
    /**
     * Updates the color space of the output color texture.
     */
    private updateOutputBufferColorSpace;
    /**
     * Updates the GBuffer configuration.
     */
    private updateGBuffer;
    render(): void;
}
