import { Event, OrthographicCamera, PerspectiveCamera, WebGLRenderer, Material } from "three";
import { Pass } from "../core/Pass.js";
import { Effect } from "../effects/Effect.js";
import { EffectMaterial } from "../materials/EffectMaterial.js";
import { Resolution } from "../utils/Resolution.js";
/**
 * An effect pass.
 *
 * Use this pass to combine {@link Effect} instances.
 *
 * @group Passes
 */
export declare class EffectPass extends Pass<EffectMaterial> implements EventListenerObject {
    /**
     * A collection that maps GBuffer components to GBuffer struct field names.
     */
    private static gBufferStructFields;
    /**
     * An event listener that forwards events to {@link handleEvent}.
     */
    private listener;
    /**
     * An animation time scale.
     */
    timeScale: number;
    /**
     * Constructs a new effect pass.
     *
     * @param effects - The effects that will be rendered by this pass.
     */
    constructor(...effects: Effect[]);
    get camera(): OrthographicCamera | PerspectiveCamera | null;
    set camera(value: OrthographicCamera | PerspectiveCamera | null);
    get subpasses(): ReadonlyArray<Pass<Material | null>>;
    private set subpasses(value);
    /**
     * The effects.
     */
    get effects(): ReadonlyArray<Effect>;
    protected set effects(value: Effect[]);
    /**
     * Indicates whether dithering is enabled.
     */
    get dithering(): boolean;
    set dithering(value: boolean);
    /**
     * Updates the composite shader material.
     *
     * @throws {@link Error} if the current effects cannot be merged.
     */
    private updateMaterial;
    /**
     * Rebuilds the composite shader material.
     */
    protected rebuild(): void;
    protected onResolutionChange(resolution: Resolution): void;
    protected onInputChange(): void;
    checkRequirements(renderer: WebGLRenderer): void;
    dispose(): void;
    render(): void;
    handleEvent(event: Event): void;
}
