import { GBuffer } from "../enums/GBuffer.js";
import { Resolution } from "../utils/Resolution.js";
import { CopyPass } from "./CopyPass.js";
/**
 * A debug pass that visualizes all input buffers.
 *
 * @group Passes
 */
export declare class BufferDebugPass extends CopyPass {
    /**
     * The size of each texture view relative to the screen size. Default is `0.1`.
     */
    viewSize: number;
    /**
     * Limits the amount of texture views per row. Default is `4`.
     */
    columns: number;
    /**
     * @see {@link bufferFocus}
     */
    private _bufferFocus;
    /**
     * A list of meshes that are used to render the input textures.
     */
    private views;
    /**
     * A scene that contains the debug meshes.
     */
    private debugScene;
    /**
     * A debug camera.
     */
    private debugCamera;
    /**
     * Constructs a new buffer debug pass.
     *
     * @param gBufferComponents - GBuffer components that should be rendered and visualized.
     */
    constructor(gBufferComponents?: Set<GBuffer>);
    /**
     * A buffer that should be rendered in fullscreen mode.
     */
    get bufferFocus(): string | null;
    set bufferFocus(value: string | null);
    /**
     * Updates the texture views.
     */
    private updateViews;
    protected onResolutionChange(resolution: Resolution): void;
    protected onInputChange(): void;
    render(): void;
}
