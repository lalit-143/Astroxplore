import { EventDispatcher, Uniform, WebGLMultipleRenderTargets, WebGLRenderTarget } from "three";
import { BaseEventMap } from "./BaseEventMap.js";
import { ShaderData } from "./ShaderData.js";
/**
 * Output resources.
 *
 * Listen for events of type {@link EVENT_CHANGE} to react to resource updates.
 *
 * @group Core
 */
export declare class Output extends EventDispatcher<BaseEventMap> implements ShaderData {
    /**
     * Triggers when an output resource is added, replaced or removed.
     *
     * @event
     */
    static readonly EVENT_CHANGE = "change";
    /**
     * Identifies the default output buffer in the {@link renderTargets} collection.
     */
    static readonly BUFFER_DEFAULT = "BUFFER_DEFAULT";
    readonly defines: Map<string, string | number | boolean>;
    readonly uniforms: Map<string, Uniform>;
    /**
     * Output render targets.
     */
    readonly renderTargets: Map<string, WebGLRenderTarget | WebGLMultipleRenderTargets | null>;
    /**
     * Constructs new output resources.
     */
    constructor();
    /**
     * Alias for {@link renderTargets}.
     */
    get buffers(): Map<string, WebGLRenderTarget | WebGLMultipleRenderTargets | null>;
    /**
     * The default output buffer.
     */
    get defaultBuffer(): WebGLRenderTarget | WebGLMultipleRenderTargets | null;
    set defaultBuffer(value: WebGLRenderTarget | WebGLMultipleRenderTargets | null);
}
