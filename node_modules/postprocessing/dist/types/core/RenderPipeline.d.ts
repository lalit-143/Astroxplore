import { Material, WebGLRenderer } from "three";
import { ImmutableTimer } from "../utils/ImmutableTimer.js";
import { Resolution } from "../utils/Resolution.js";
import { Disposable } from "./Disposable.js";
import { Renderable } from "./Renderable.js";
import { Resizable } from "./Resizable.js";
import { Pass } from "./Pass.js";
/**
 * A render pipeline that can be used to group and run passes.
 *
 * @group Core
 */
export declare class RenderPipeline implements Disposable, Renderable, Resizable {
    /**
     * A shared I/O manager.
     */
    private static readonly ioManager;
    /**
     * A timer.
     */
    private _timer;
    /**
     * @see {@link passes}
     */
    private _passes;
    /**
     * The current renderer.
     */
    private _renderer;
    /**
     * The current resolution.
     *
     * @see {@link updateStyle}
     */
    readonly resolution: Resolution;
    /**
     * Determines whether the style of the canvas should be updated when the resolution is changed. Default is `true`.
     */
    updateStyle: boolean;
    /**
     * Determines whether the last pass should automatically render to screen. Default is `true`.
     */
    autoRenderToScreen: boolean;
    /**
     * Constructs a new render pipeline.
     *
     * @param renderer - A renderer.
     */
    constructor(renderer?: WebGLRenderer | null);
    /**
     * The renderer.
     */
    get renderer(): WebGLRenderer | null;
    set renderer(value: WebGLRenderer | null);
    /**
     * The internal timer.
     */
    get timer(): ImmutableTimer;
    /**
     * A list of all registered passes.
     */
    get passes(): ReadonlyArray<Pass<Material | null>>;
    /**
     * Registers a pass.
     *
     * @param pass - The pass.
     */
    private registerPass;
    /**
     * Unregisters a pass.
     *
     * @param pass - The pass.
     */
    private unregisterPass;
    /**
     * Adds a pass.
     *
     * @param pass - The pass.
     */
    addPass(pass: Pass<Material | null>): void;
    /**
     * Removes a pass.
     *
     * @param pass - The pass.
     */
    removePass(pass: Pass<Material | null>): void;
    /**
     * Removes all passes.
     */
    removeAllPasses(): void;
    /**
     * Renders this pipeline.
     *
     * This method should be called once per frame via `requestAnimationFrame`.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame
     * @param timestamp - The current time in milliseconds.
     */
    render(timestamp?: number): void;
    /**
     * Handles resolution change events.
     *
     * @param resolution - The resolution.
     */
    private onResolutionChange;
    /**
     * Sets the render size.
     *
     * @param width - The width.
     * @param height - The height.
     * @param updateStyle - Whether the style of the canvas should be updated. Default is `true`.
     */
    setSize(width: number, height: number, updateStyle?: boolean): void;
    dispose(): void;
}
