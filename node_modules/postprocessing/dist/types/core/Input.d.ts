import { EventDispatcher, Texture, Uniform } from "three";
import { GBuffer } from "../enums/GBuffer.js";
import { BaseEventMap } from "./BaseEventMap.js";
import { ShaderData } from "./ShaderData.js";
/**
 * Input resources.
 *
 * Listen for events of type {@link EVENT_CHANGE} to react to resource updates.
 *
 * @group Core
 */
export declare class Input extends EventDispatcher<BaseEventMap> implements ShaderData {
    /**
     * Triggers when an input resource is added, replaced or removed.
     *
     * This event is also fired when gBuffer components are changed. The actual gBuffer textures can be accessed through
     * the {@link textures} map by using {@link GBuffer} values as keys.
     *
     * @event
     */
    static readonly EVENT_CHANGE = "change";
    /**
     * Identifies the default input buffer in the {@link textures} collection.
     */
    static readonly BUFFER_DEFAULT = "buffer.default";
    readonly defines: Map<string, string | number | boolean>;
    readonly uniforms: Map<string, Uniform>;
    /**
     * Required gBuffer components.
     *
     * {@link GBuffer.COLOR} is included by default.
     */
    readonly gBuffer: Set<GBuffer>;
    /**
     * Input textures.
     *
     * Entries specified in {@link gBuffer} will be added automatically.
     *
     * @see {@link EVENT_CHANGE}
     */
    readonly textures: Map<string | GBuffer, Texture | null>;
    /**
     * Constructs new input resources.
     */
    constructor();
    /**
     * Alias for {@link textures}.
     */
    get buffers(): Map<string | GBuffer, Texture | null>;
    /**
     * The default input buffer.
     */
    get defaultBuffer(): Texture | null;
    set defaultBuffer(value: Texture | null);
    /**
     * Indicates whether the default buffer uses high precision.
     */
    get frameBufferPrecisionHigh(): boolean;
}
