import { EventDispatcher, Material, OrthographicCamera, PerspectiveCamera, Scene, WebGLRenderTarget, WebGLRenderer } from "three";
import { ImmutableTimer } from "../utils/ImmutableTimer.js";
import { Resolution } from "../utils/Resolution.js";
import { BaseEventMap } from "./BaseEventMap.js";
import { Disposable } from "./Disposable.js";
import { Input } from "./Input.js";
import { Output } from "./Output.js";
import { Renderable } from "./Renderable.js";
/**
 * An abstract pass.
 *
 * @group Core
 */
export declare abstract class Pass<TMaterial extends Material | null = null> extends EventDispatcher<BaseEventMap> implements Disposable, Renderable {
    /**
     * Triggers when this pass has changed and requires a full update.
     *
     * @event
     */
    static readonly EVENT_CHANGE = "change";
    /**
     * A shared fullscreen triangle.
     *
     * The screen size is 2x2 units (NDC). A triangle needs to be 4x4 units to fill the screen.
     * @see https://michaldrobot.com/2014/04/01/gcn-execution-patterns-in-full-screen-passes/
     */
    private static readonly fullscreenGeometry;
    /**
     * A scene that contains the fullscreen mesh.
     */
    private fullscreenScene;
    /**
     * A fullscreen camera.
     */
    private fullscreenCamera;
    /**
     * A fullscreen mesh.
     */
    private screen;
    /**
     * @see {@link Pass.prototype.name}
     */
    private _name;
    /**
     * @see {@link renderer}
     */
    private _renderer;
    /**
     * @see {@link timer}
     */
    private _timer;
    /**
     * @see {@link scene}
     */
    private _scene;
    /**
     * @see {@link camera}
     */
    private _camera;
    /**
     * @see {@link subpasses}
     */
    private _subpasses;
    /**
     * A collection of objects that will be disposed when this pass is disposed.
     *
     * IO resources will be disposed separately.
     */
    protected readonly disposables: Set<Disposable>;
    /**
     * The current resolution.
     */
    readonly resolution: Resolution;
    /**
     * The input resources of this pass.
     */
    readonly input: Input;
    /**
     * The output resources of this pass.
     */
    readonly output: Output;
    /**
     * Indicates whether this pass is enabled.
     */
    enabled: boolean;
    /**
     * Constructs a new pass.
     *
     * @param name - A name that will be used for debugging purposes. Doesn't have to be unique.
     */
    constructor(name: string);
    /**
     * The name of this pass.
     */
    get name(): string;
    protected set name(value: string);
    /**
     * A list of subpasses.
     *
     * Subpasses are subject to automatic resource optimizations.
     */
    get subpasses(): ReadonlyArray<Pass<Material | null>>;
    protected set subpasses(value: Pass<Material | null>[]);
    /**
     * A timer.
     */
    get timer(): ImmutableTimer | null;
    set timer(value: ImmutableTimer | null);
    /**
     * The current renderer.
     */
    get renderer(): WebGLRenderer | null;
    set renderer(value: WebGLRenderer | null);
    /**
     * The main scene.
     */
    get scene(): Scene | null;
    set scene(value: Scene | null);
    /**
     * The main camera.
     */
    get camera(): OrthographicCamera | PerspectiveCamera | null;
    set camera(value: OrthographicCamera | PerspectiveCamera | null);
    /**
     * The current fullscreen material.
     */
    get fullscreenMaterial(): TMaterial;
    protected set fullscreenMaterial(value: TMaterial);
    /**
     * Updates the size of the default output buffer, if it exists.
     */
    private updateOutputBufferSize;
    /**
     * Updates the shader input data of the fullscreen material, if it exists.
     */
    private updateFullscreenMaterial;
    /**
     * Checks if his pass uses convolution shaders.
     *
     * Only works on passes that use `FullscreenMaterial`.
     *
     * @param recursive - Controls whether subpasses should be checked recursively.
     * @return True if the pass uses convolution shaders.
     */
    isConvolutionPass(recursive: boolean): boolean;
    /**
     * Checks if the current renderer supports all features that are required by this pass.
     *
     * Override this method to check if the current device supports the necessary features.
     * This method should throw an error if the requirements are not met.
     *
     * @param renderer - The current renderer.
     * @throws If the device doesn't meet the requirements.
     */
    checkRequirements(renderer: WebGLRenderer): void;
    /**
     * Performs tasks when the input resources have changed.
     *
     * Override this method to handle input changes.
     */
    protected onInputChange(): void;
    /**
     * Performs tasks when the output resources have changed.
     *
     * Override this method to handle output changes.
     */
    protected onOutputChange(): void;
    /**
     * Performs tasks when the resolution has changed.
     *
     * Override this method to handle resolution changes.
     *
     * @param resolution - The updated resolution of this pass.
     */
    protected onResolutionChange(resolution: Resolution): void;
    /**
     * Creates a framebuffer.
     *
     * @return The framebuffer.
     */
    protected createFramebuffer(): WebGLRenderTarget;
    /**
     * Dispatches a `change` event.
     */
    protected setChanged(): void;
    /**
     * Renders the fullscreen material to the current render target.
     */
    protected renderFullscreen(): void;
    abstract render(): void;
    dispose(): void;
}
