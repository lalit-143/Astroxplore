import { EventDispatcher } from "three";
import { BaseEventMap } from "../core/BaseEventMap.js";
/**
 * A resolution.
 *
 * @group Utils
 */
export declare class Resolution extends EventDispatcher<BaseEventMap> {
    /**
     * Triggers when the resolution is changed.
     *
     * @event
     */
    static readonly EVENT_CHANGE = "change";
    /**
     * An auto sizing constant.
     *
     * Can be used to automatically calculate the width or height based on the original aspect ratio.
     */
    static readonly AUTO_SIZE = -1;
    /**
     * The base resolution.
    */
    private baseSize;
    /**
     * The preferred resolution.
     */
    private preferredSize;
    /**
     * The effective resolution.
     */
    private effectiveSize;
    /**
     * @see {@link scale}
     */
    private _scale;
    /**
     * Constructs a new resolution.
     *
     * @param width - The preferred width.
     * @param height - The preferred height.
     * @param scale - A resolution scale.
     */
    constructor(width?: number, height?: number, scale?: number);
    /**
     * Calculates the effective size.
     */
    private updateEffectiveSize;
    /**
     * The effective width, calculated based on the preferred size and resolution scale.
     */
    get width(): number;
    /**
     * The effective height, calculated based on the preferred size and resolution scale.
     */
    get height(): number;
    /**
     * The resolution scale.
     */
    get scale(): number;
    set scale(value: number);
    /**
     * The base width.
     */
    get baseWidth(): number;
    set baseWidth(value: number);
    /**
     * The base height.
     */
    get baseHeight(): number;
    set baseHeight(value: number);
    /**
     * Sets the base size.
     *
     * @param width - The width.
     * @param height - The height.
     */
    setBaseSize(width: number, height: number): void;
    /**
     * The preferred width.
     */
    get preferredWidth(): number;
    set preferredWidth(value: number);
    /**
     * The preferred height.
     */
    get preferredHeight(): number;
    set preferredHeight(value: number);
    /**
     * Sets the preferred size.
     *
     * @param width - The width.
     * @param height - The height.
     */
    setPreferredSize(width: number, height: number): void;
    /**
     * Copies the given resolution.
     *
     * @param resolution - The resolution.
     */
    copy(resolution: Resolution): void;
    /**
     * Dispatches a `change` event.
     */
    private setChanged;
}
