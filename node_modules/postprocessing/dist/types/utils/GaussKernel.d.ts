/**
 * Uses Pascal's Triangle to generate coefficients in the expansion of any binomial expression.
 *
 * @see https://mathworld.wolfram.com/PascalsTriangle.html
 * @param n - The index of the coefficients row in Pascal's Triangle.
 * @return The integer coefficients stored as doubles.
 */
/**
 * A Gauss kernel.
 *
 * @see https://github.com/Jam3/glsl-fast-gaussian-blur
 * @group Utils
 */
export declare class GaussKernel {
    /**
     * The weights for discrete sampling.
     */
    weights: Float64Array;
    /**
     * The offsets for discrete sampling.
     */
    offsets: Float64Array;
    /**
     * The weights for linear sampling.
     */
    linearWeights: Float64Array;
    /**
     * The offsets for linear sampling.
     */
    linearOffsets: Float64Array;
    /**
     * Constructs a new Gauss kernel.
     *
     * @param kernelSize - The kernel size. Should be an odd number in the range [3, 1020].
     * @param edgeBias - Determines how many edge coefficients should be cut off for increased accuracy.
     */
    constructor(kernelSize: number, edgeBias?: number);
    /**
     * The number of steps for discrete sampling.
     */
    get steps(): number;
    /**
     * The number of steps for linear sampling.
     */
    get linearSteps(): number;
    /**
     * Generates the kernel.
     *
     * @param kernelSize - The kernel size.
     * @param edgeBias - The amount of edge coefficients to ignore.
     */
    private generate;
}
