import { EventDispatcher } from "three";
import { BaseEventMap } from "../core/BaseEventMap.js";
/**
 * A set that emits events of type {@link EVENT_CHANGE} when its data changes.
 *
 * @group Utils
 */
export declare class ObservableSet<T> extends EventDispatcher<BaseEventMap> implements Set<T> {
    /**
     * Triggers when an entry is added, replaced or removed.
     *
     * @event
     */
    static readonly EVENT_CHANGE = "change";
    /**
     * The internal data collection.
     */
    private data;
    /**
     * Constructs a new set.
     *
     * @param iterable - A list of entries to add to this set.
     */
    constructor(iterable?: Iterable<T>);
    get size(): number;
    get [Symbol.toStringTag](): string;
    clear(): void;
    delete(value: T): boolean;
    has(value: T): boolean;
    add(value: T): this;
    entries(): IterableIterator<[T, T]>;
    keys(): IterableIterator<T>;
    values(): IterableIterator<T>;
    forEach(callbackfn: (value: T, value2: T, set: Set<T>) => void, thisArg?: unknown): void;
    [Symbol.iterator](): IterableIterator<T>;
}
