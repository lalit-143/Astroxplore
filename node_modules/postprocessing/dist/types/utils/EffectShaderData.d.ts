import { ColorSpace, Uniform } from "three";
import { ShaderData } from "../core/ShaderData.js";
import { Effect } from "../effects/Effect.js";
import { BlendMode } from "../effects/blending/BlendMode.js";
import { EffectShaderSection } from "../enums/EffectShaderSection.js";
import { GData } from "../enums/GData.js";
/**
 * A collection of shader data.
 *
 * @internal
 * @group Utils
 */
export declare class EffectShaderData implements ShaderData {
    readonly defines: Map<string, string | number | boolean>;
    readonly uniforms: Map<string, Uniform>;
    /**
     * The shader parts.
     */
    readonly shaderParts: Map<EffectShaderSection, string>;
    /**
     * The blend modes of the individual effects.
     */
    readonly blendModes: Map<number, BlendMode>;
    /**
     * A set of varyings.
     */
    readonly varyings: Set<string>;
    /**
     * A collection of required GBuffer data.
     */
    readonly gData: Set<GData>;
    /**
     * A list of effects that use convolution operations.
     */
    readonly convolutionEffects: Set<Effect>;
    /**
     * Indicates whether the shader transforms UV coordinates in the fragment shader.
     */
    uvTransformation: boolean;
    /**
     * Keeps track of the current color space.
     */
    colorSpace: ColorSpace;
    /**
     * Constructs new shader data.
     */
    constructor();
    /**
     * Validates the given effect.
     *
     * @param effect - The effect.
     * @throws {@link Error} if the effect is invalid or cannot be merged.
     */
    private validateEffect;
    /**
    * Integrates the given effect by collecting relevant shader data.
    *
    * @param prefix - A prefix.
    * @param effect - The effect.
    * @throws {@link Error} if the effect is invalid or cannot be merged.
    */
    integrateEffect(prefix: string, effect: Effect): void;
    /**
    * Creates a struct that defines the required GBuffer components.
    *
    * @return The shader code.
    */
    createGBufferStruct(): string;
    /**
    * Creates a struct that defines the required GBuffer data.
    *
    * @return The shader code.
    */
    createGDataStruct(): string;
    /**
    * Creates the GData setup code.
    *
    * @return The shader code.
    */
    createGDataSetup(): string;
    /**
    * Creates the relevant blend function declarations.
    *
    * @return The shader code.
    */
    createBlendFunctions(): string;
}
