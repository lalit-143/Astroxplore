import { EventDispatcher } from "three";
import { BaseEventMap } from "../core/BaseEventMap.js";
/**
 * A map that emits events of type {@link EVENT_CHANGE} when its data changes.
 *
 * @group Utils
 */
export declare class ObservableMap<K, V> extends EventDispatcher<BaseEventMap> implements Map<K, V> {
    /**
     * Triggers when an entry is added, replaced or removed.
     *
     * @event
     */
    static readonly EVENT_CHANGE = "change";
    /**
     * The internal data collection.
     */
    private data;
    /**
     * Constructs a new map.
     *
     * @param iterable - A list of entries to add to this map.
     */
    constructor(iterable?: Iterable<readonly [K, V]>);
    get size(): number;
    get [Symbol.toStringTag](): string;
    clear(): void;
    delete(key: K): boolean;
    get(key: K): V | undefined;
    has(key: K): boolean;
    set(key: K, value: V): this;
    entries(): IterableIterator<[K, V]>;
    keys(): IterableIterator<K>;
    values(): IterableIterator<V>;
    forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: unknown): void;
    [Symbol.iterator](): IterableIterator<[K, V]>;
}
