import { OrthographicCamera, PerspectiveCamera, RawShaderMaterial, ShaderMaterialParameters, Texture } from "three";
import { Resizable } from "../core/Resizable.js";
/**
 * Supported precision constants.
 *
 * @group Materials
 */
export type OutputPrecision = "highp" | "mediump" | "lowp";
/**
 * A fullscreen shader material.
 *
 * This material defines the following commonly used uniforms:
 * - `mat4` projectionMatrix
 * - `mat4` projectionMatrixInverse
 * - `vec3` cameraParams
 * - `vec4` resolution
 * - `sampler2D` inputBuffer
 *
 * Requires WebGL 2.
 *
 * @see {@link inputBuffer} for setting an input buffer.
 * @see {@link copyCameraSettings} for copying camera settings.
 * @see {@link setSize} for setting the resolution.
 * @group Materials
 */
export declare abstract class FullscreenMaterial extends RawShaderMaterial implements Resizable {
    /**
     * Constructs a new fullscreen shader material.
     */
    constructor(parameters?: ShaderMaterialParameters);
    /**
     * The precision of the output color.
     *
     * This setting will be set automatically by the I/O manager.
     */
    get outputPrecision(): OutputPrecision;
    set outputPrecision(value: OutputPrecision);
    /**
     * Indicates whether the input buffer uses high precision.
     */
    private get frameBufferPrecisionHigh();
    private set frameBufferPrecisionHigh(value);
    /**
     * The input buffer.
     *
     * If this buffer uses high precision, the macro `FRAME_BUFFER_PRECISION_HIGH` will be defined.
     */
    get inputBuffer(): Texture | null;
    set inputBuffer(value: Texture | null);
    /**
     * The current camera near plane value.
     */
    protected get near(): number;
    /**
     * The current camera far plane value.
     */
    protected get far(): number;
    /**
     * Copies the settings of the given camera.
     *
     * Updates the `cameraParams` uniform and updates the `PERSPECTIVE_CAMERA` macro.
     *
     * @param camera - A camera.
     */
    copyCameraSettings(camera: OrthographicCamera | PerspectiveCamera): void;
    /**
     * Updates the `resolution` uniform (XY = resolution, ZW = texelSize).
     *
     * @param width - The width.
     * @param height - The height.
     */
    setSize(width: number, height: number): void;
}
