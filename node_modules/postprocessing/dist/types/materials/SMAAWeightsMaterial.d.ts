import { Texture } from "three";
import { FullscreenMaterial } from "./FullscreenMaterial.js";
/**
 * Subpixel Morphological Antialiasing.
 *
 * This material computes weights for detected edges.
 *
 * @group Materials
 */
export declare class SMAAWeightsMaterial extends FullscreenMaterial {
    /**
     * Constructs a new SMAA weights material.
     */
    constructor();
    /**
     * The search lookup texture.
     */
    get searchTexture(): Texture | null;
    set searchTexture(value: Texture | null);
    /**
     * The area lookup texture.
     */
    get areaTexture(): Texture | null;
    set areaTexture(value: Texture | null);
    /**
     * The maximum amount of steps performed in the horizontal/vertical pattern searches, at each side of the pixel.
     * Range: [0, 112].
     *
     * In number of pixels, it's actually the double. So the maximum line length perfectly handled by, for example 16, is
     * 64 (perfectly means that longer lines won't look as good, but are still antialiased).
     */
    get orthogonalSearchSteps(): number;
    set orthogonalSearchSteps(value: number);
    /**
     * The maximum steps performed in the diagonal pattern searches, at each side of the pixel. This search
     * jumps one pixel at a time. Range: [0, 20].
     *
     * On high-end machines this search is cheap (between 0.8x and 0.9x slower for 16 steps), but it can have a
     * significant impact on older machines.
     */
    get diagonalSearchSteps(): number;
    set diagonalSearchSteps(value: number);
    /**
     * Indicates whether diagonal pattern detection is enabled.
     */
    get diagonalDetection(): boolean;
    set diagonalDetection(value: boolean);
    /**
     * Specifies how much sharp corners will be rounded. Range: [0, 100].
     */
    get cornerRounding(): number;
    set cornerRounding(value: number);
    /**
     * Indicates whether corner detection is enabled.
     */
    get cornerDetection(): boolean;
    set cornerDetection(value: boolean);
}
