import { ColorSpace } from "three";
import { Pass } from "../core/Pass.js";
import { BlendMode } from "./blending/BlendMode.js";
/**
 * An abstract effect.
 *
 * Effects are subpasses that can be merged using the {@link EffectPass}.
 *
 * @group Effects
 */
export declare abstract class Effect extends Pass {
    /**
     * The blend mode.
     */
    readonly blendMode: BlendMode;
    /**
     * @see {@link fragmentShader}
     */
    private _fragmentShader;
    /**
     * @see {@link vertexShader}
     */
    private _vertexShader;
    /**
     * @see {@link inputColorSpace}
     */
    private _inputColorSpace;
    /**
     * @see {@link outputColorSpace}
     */
    private _outputColorSpace;
    /**
     * Constructs a new effect.
     *
     * @param name - A name that will be used for debugging purposes. Doesn't have to be unique.
     */
    constructor(name: string);
    /**
     * The fragment shader.
     */
    get fragmentShader(): string | null;
    set fragmentShader(value: string | null);
    /**
     * The fragment shader.
     */
    get vertexShader(): string | null;
    set vertexShader(value: string | null);
    /**
     * The input color space. Default is `NoColorSpace`, meaning no change.
     *
     * Ensures that the input colors are in the specified color space, converting them if necessary.
     */
    get inputColorSpace(): ColorSpace;
    set inputColorSpace(value: ColorSpace);
    /**
     * The output color space. Default is `NoColorSpace`, meaning no change.
     *
     * Should only be defined if this effect converts the input colors to a different color space.
     */
    get outputColorSpace(): ColorSpace;
    set outputColorSpace(value: ColorSpace);
    /**
     * Indicates whether this effect defines a `mainImage` function in its fragment shader.
     */
    get hasMainImageFunction(): boolean;
    /**
     * Indicates whether this effect defines a `mainUv` function in its fragment shader.
     */
    get hasMainUvFunction(): boolean;
    /**
     * Indicates whether this effect defines a `mainSupport` function in its vertex shader.
     */
    get hasMainSupportFunction(): boolean;
    render(): void;
}
